package pl.sperka.ae2.plugin.oldclasses.microcontrollers;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.*;
import java.util.HashMap;
import java.awt.geom.Rectangle2D;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.image.BufferedImage;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
//import say.swing.JFontChooser;
/**
 *
 * @author Piotrek
 */
public class FontGen extends javax.swing.JFrame {
    public static JFontChooser fc = new JFontChooser();
    String index="";
    String chwidth="", chheight="";
    /**
     * Creates new form FontGen
     */
    public FontGen( Component parent ) {
        initComponents();
        jtaString.setFont(fc.getSelectedFont());
        setLocationRelativeTo( parent );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSzer = new javax.swing.ButtonGroup();
        bgWys = new javax.swing.ButtonGroup();
        bgDane = new javax.swing.ButtonGroup();
        bgBajt = new javax.swing.ButtonGroup();
        bgTablica = new javax.swing.ButtonGroup();
        jbFont = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaString = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jbInsert = new javax.swing.JButton();
        jcbString = new javax.swing.JComboBox();
        jbGenerate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaWynik = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jrbSSzer = new javax.swing.JRadioButton();
        jrbZSzer = new javax.swing.JRadioButton();
        jrbSWys = new javax.swing.JRadioButton();
        jrbZWys = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jrbLiniaBajt = new javax.swing.JRadioButton();
        jrbZnakBajt = new javax.swing.JRadioButton();
        jrbCiag = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jrbMSB = new javax.swing.JRadioButton();
        jrbLSB = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jrbTabPel = new javax.swing.JRadioButton();
        jrbTabNiepel = new javax.swing.JRadioButton();
        jrbTabPolPel = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generator fontów");
        setResizable(false);

        jbFont.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbFont.setText("Zmień czcionkę");
        jbFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFontActionPerformed(evt);
            }
        });

        jtaString.setColumns(1);
        jtaString.setLineWrap(true);
        jtaString.setRows(1);
        jtaString.setMaximumSize(new java.awt.Dimension(104, 64));
        jScrollPane1.setViewportView(jtaString);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Znaki do wygenerowania:");

        jbInsert.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbInsert.setText("Wstaw");
        jbInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInsertActionPerformed(evt);
            }
        });

        jcbString.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jcbString.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A-Z", "a-z", "A-Z, a-z", "0-9", "Wszystkie z ASCII", "Polskie znaki" }));

        jbGenerate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbGenerate.setText("Generuj");
        jbGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGenerateActionPerformed(evt);
            }
        });

        jtaWynik.setColumns(20);
        jtaWynik.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jtaWynik.setRows(5);
        jScrollPane2.setViewportView(jtaWynik);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Wygenerowana tablica:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Znak"));

        bgSzer.add(jrbSSzer);
        jrbSSzer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbSSzer.setText("Stała szerokość");

        bgSzer.add(jrbZSzer);
        jrbZSzer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbZSzer.setSelected(true);
        jrbZSzer.setText("Zmienna szerokość");

        bgWys.add(jrbSWys);
        jrbSWys.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbSWys.setSelected(true);
        jrbSWys.setText("Stała wysokość");

        bgWys.add(jrbZWys);
        jrbZWys.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbZWys.setText("Zmienna wysokość");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbZSzer)
                    .addComponent(jrbSSzer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbSWys)
                    .addComponent(jrbZWys)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbSSzer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbSWys, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbZSzer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbZWys, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Układ danych"));

        bgDane.add(jrbLiniaBajt);
        jrbLiniaBajt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbLiniaBajt.setSelected(true);
        jrbLiniaBajt.setText("Każda linia znaku - osobne bajty");

        bgDane.add(jrbZnakBajt);
        jrbZnakBajt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbZnakBajt.setText("Każdy znak - osobne bajty");
        jrbZnakBajt.setEnabled(false);

        bgDane.add(jrbCiag);
        jrbCiag.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbCiag.setText("Ciąg danych");
        jrbCiag.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbLiniaBajt)
                    .addComponent(jrbZnakBajt)
                    .addComponent(jrbCiag))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jrbLiniaBajt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbZnakBajt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbCiag, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Zapełnianie bajtu od strony"));

        bgBajt.add(jrbMSB);
        jrbMSB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbMSB.setSelected(true);
        jrbMSB.setText("MSB");

        bgBajt.add(jrbLSB);
        jrbLSB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbLSB.setText("LSB");
        jrbLSB.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jrbMSB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbLSB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jrbMSB, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jrbLSB, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Tablica opisu znaków"));

        bgTablica.add(jrbTabPel);
        jrbTabPel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbTabPel.setText("Pełna, do ostatniego gen. znaku");

        bgTablica.add(jrbTabNiepel);
        jrbTabNiepel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbTabNiepel.setSelected(true);
        jrbTabNiepel.setText("Niepełna - tylko wygenerowane znaki");

        bgTablica.add(jrbTabPolPel);
        jrbTabPolPel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jrbTabPolPel.setText("Pełna, tylko pomiędzy gen. znakami");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbTabPel)
                    .addComponent(jrbTabNiepel)
                    .addComponent(jrbTabPolPel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jrbTabPel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbTabPolPel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbTabNiepel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jbFont, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbGenerate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jcbString, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbInsert))
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbFont, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbInsert, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                            .addComponent(jcbString))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

String sortChars(String ch)
{
    int n=ch.length();
    //Tworzenie tablicy pomocniczej
    char t[];
    char temp;
    t=ch.toCharArray();
    while(n>1) //Sortowanie bąbelkowe
    {
        for(int i=0;i<n-1;i++)
        {
            if(t[i]>t[i+1])
            {
                temp=t[i];
                t[i]=t[i+1];
                t[i+1]=temp;
            }
        }
        n--;
    }
    return new String(t);
}
    
Rectangle2D getStringBounds(String characters, Font font)
{
    FontRenderContext rendCont = new FontRenderContext(null, true, true);
    BufferedImage bi = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB); //Tworzymy jakikolwiek BI
    Graphics gr = bi.getGraphics(); //Zeby mozna go tu przypisac
    Graphics2D g = (Graphics2D) gr; //Tworzymy G2D
    g.setFont(font); //Ustawiamy czcionke
    FontMetrics fm = g.getFontMetrics(); //Tworzymy FM do pomiarow
    int hmax = fm.getHeight(); //Max. wysokosc znaku, ale trzeba ja pomnozyc przez 2 dla niektorych znakow (dla pola G2D)
    //String t=characters.substring(i,i+1);
    int wmax = fm.stringWidth(characters); //Max. szerokosc znaku
    GlyphVector gv = g.getFont().createGlyphVector(rendCont, characters); //Tworzymy GV
    Rectangle2D bounds = gv.getPixelBounds(null, wmax/2, hmax); //Wyznaczamy granice znaku
    g.dispose();
    gr.dispose();
    bi.flush();
    return bounds;
}

int getMaxFontWidth(String characters, Font font)
{
    int t=0;
    FontRenderContext rendCont = new FontRenderContext(null, true, true);
    BufferedImage bi = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB); //Tworzymy jakikolwiek BI
    Graphics gr = bi.getGraphics(); //Zeby mozna go tu przypisac
    Graphics2D g = (Graphics2D) gr; //Tworzymy G2D
    g.setFont(font); //Ustawiamy czcionke
    FontMetrics fm = g.getFontMetrics(); //Tworzymy FM do pomiarow
    for(int i=0;i<characters.length();i++)
    {
        if(fm.stringWidth(characters.substring(i,i+1))>t)
            t=fm.stringWidth(characters.substring(i,i+1));
    }
    g.dispose();
    gr.dispose();
    bi.flush();
    return t;
}
    
void generateGlyphs(int fontSize, String characters, Font font){
  FontRenderContext rendCont = new FontRenderContext(null, true, true);
/*
 * Potrzeba jeszcze: Ustalić najwyższy znak w zestawie i do niego dostosować wysokość reszty, - działa
 * opcje: stała wysokość, szerokość, zmienna wysokość, szerokość... - działa
 * Ustawienia: bity w ciągu, znak w ciągu, linia po linii, MSB, LSB
 * Dodawanie wizualizacji znaku jako komentarz, tablica z opisem znaków - wybór tablicy pełnej czy niepełnej
 * Dopracować dla niektórych czcionek "index out of bounds" - chyba działa
 */
  Rectangle2D strbounds=getStringBounds(characters,font); //Wymiary wszystkich znaków
  chwidth=Integer.toString((int)Math.ceil(strbounds.getWidth()));
  chheight=Integer.toString((int)Math.ceil(strbounds.getHeight()));
  int maxFontWidth=0;
  char lastChar=32;
  if(jrbSSzer.isSelected()) maxFontWidth=getMaxFontWidth(characters,font);
  int iindex=0;
  for(int i = 0; i < characters.length(); i++){    
    BufferedImage bi = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB); //Tworzymy jakikolwiek BI
    Graphics gr = bi.getGraphics(); //Zeby mozna go tu przypisac
    Graphics2D g = (Graphics2D) gr; //Tworzymy G2D
    g.setFont(font); //Ustawiamy czcionke
    FontMetrics fm = g.getFontMetrics(); //Tworzymy FM do pomiarow
    int hmax=0, wmax=0;
    hmax = fm.getHeight(); //Max. wysokosc znaku, ale trzeba ja pomnozyc przez 2 dla niektorych znakow (dla pola G2D)
    String t=characters.substring(i,i+1);
    if(jrbSWys.isSelected()) wmax=(int)Math.ceil(strbounds.getWidth());
    else wmax = fm.stringWidth(t); //Max. szerokosc znaku
    GlyphVector gv = g.getFont().createGlyphVector(rendCont, t); //Tworzymy GV
    Rectangle2D bounds = gv.getPixelBounds(null, wmax/2, hmax); //Wyznaczamy granice znaku
    bi = new BufferedImage(wmax*2,hmax*2, BufferedImage.TYPE_INT_RGB); //Tworzymy odpowiednio duży BI
    //int w = (int)Math.ceil(bounds.getWidth()); //Szerokosc znaku
    //int h = (int)Math.ceil(strbounds.getHeight()); //Wysokosc znaku //strbounds dla stałej wysokości znaku
    gr = bi.getGraphics(); //Nie wiem czy trzeba to powtarzac...
    g = (Graphics2D) gr; //j.w.
    g.setFont(font); //j.w.
    int sx=0, sy=0, w=0, h=0;
    sx = (int)bounds.getX();
    w = (int)Math.ceil(bounds.getWidth());
    if(jrbSWys.isSelected()) {//Poczatek znaku Y //strbounds dla stałej wysokości znaku
        sy = (int)strbounds.getY();
        h = (int)Math.ceil(strbounds.getHeight());
    } else {
        sy = (int)bounds.getY();
        h = (int)Math.ceil(bounds.getHeight());
    }
    g.drawString(t, wmax/2, hmax);
   // JLabel picLabel = new JLabel(new ImageIcon(bi));

    //System.out.printf("%d %d\n",w,h);
       // picLabel.setSize(wmax*2,hmax*2);
      //  jPanel1.add(picLabel);
       // picLabel.repaint();
    int temp=0, wsk=128;
    String commentline="";
    //Wypełnianie tablicy indexów pustymi wpisami, jeżeli trzeba
    if(jrbTabPel.isSelected()||jrbTabPolPel.isSelected())
    {
        char tmp[] = t.toCharArray();
        if(jrbTabPolPel.isSelected()&&(lastChar!=32)||jrbTabPel.isSelected())
        if(tmp[0]!=(lastChar+1)) //Wykryto nieciągłość znaków
        {
            for(int j=(lastChar+1);j<tmp[0];j++)
            {
                if (jrbZWys.isSelected()&&jrbZSzer.isSelected())
                    index=index+"{0,0,0}, //"+Character.toString((char)j)+"\n";
                else if (jrbSWys.isSelected()&&jrbSSzer.isSelected())
                    index=index+"{0}, //"+Character.toString((char)j)+"\n";
                else index=index+"{0,0}, //"+Character.toString((char)j)+"\n";
            }
        }
        lastChar=tmp[0];
    }
    ///
    if(jrbSWys.isSelected()&&jrbZSzer.isSelected())
        index=index+"{"+Integer.toString(w)+", "+Integer.toString(iindex)+"}, //"+t+"\n";
    else if (jrbZWys.isSelected()&&jrbSSzer.isSelected())
        index=index+"{"+Integer.toString(h)+", "+Integer.toString(iindex)+"}, //"+t+"\n";
    else if (jrbZWys.isSelected()&&jrbZSzer.isSelected())
        index=index+"{"+Integer.toString(w)+", "+Integer.toString(h)+", "+Integer.toString(iindex)+"}, //"+t+"\n";
    else
        index=index+"{"+Integer.toString(iindex)+"}, //"+t+"\n";
    //Obliczamy jeżeli stała szerokość ile dodać zer na początku i końcu
    int z1=(int)Math.round((maxFontWidth-w)/2);
    int z2=maxFontWidth-w-z1;
    //\\//
    for( int yy = sy; yy < sy+h; yy++ ) { //"Wyciagamy" narysowany na nadmiarowej plaszczyznie znak i obrabiamy
    if(!jrbSSzer.isSelected()) //Dla wszystkich innych niż ze stałą szerkością
        for( int xx = sx; xx < sx+w; xx++ ) {
            //if(bi.getRGB(xx, yy)==-16777216) System.out.printf(" "); else System.out.printf("O");
            if(bi.getRGB(xx, yy)!=-16777216)
            {
                commentline=commentline+"O";
                temp=temp+wsk;
            } else commentline=commentline+" ";
            if(wsk>1) wsk/=2; else {
                wsk=128;
                jtaWynik.append("0x"+Integer.toHexString(0x100|temp).substring(1)+", ");
                iindex++;
                temp=0;
            }
        }
    else //Gdy chcemy stałą szerokość
        for( int xx = sx-z1; xx < sx+w+z2; xx++ ) {
        //if(bi.getRGB(xx, yy)==-16777216) System.out.printf(" "); else System.out.printf("O");
            if(xx<sx)//Zera na począktu
            {
                commentline=commentline+" ";
            } else if(xx>=(sx+w)) { //Zera na końcu
                commentline=commentline+" ";
            } else if(bi.getRGB(xx, yy)!=-16777216)
            {
                commentline=commentline+"O";
                temp=temp+wsk;
            } else commentline=commentline+" ";
            if(wsk>1) wsk/=2; else {
                wsk=128;
                jtaWynik.append("0x"+Integer.toHexString(0x100|temp).substring(1)+", ");
                iindex++;
                temp=0;
            }
        }
    if(wsk!=128||temp!=0) {
        jtaWynik.append("0x"+Integer.toHexString(0x100|temp).substring(1)+", //"+commentline+"\n");
        iindex++;
    }
    else jtaWynik.append("//"+commentline+"\n");
    wsk=128;
    temp=0;
    commentline="";
    }
    jtaWynik.append("\n");
  }
}
    
    private void jbFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFontActionPerformed
        int result = fc.showDialog(this);
        if (result == JFontChooser.OK_OPTION)
        {
            jtaString.setFont(fc.getSelectedFont());
        }
    }//GEN-LAST:event_jbFontActionPerformed

    private void jbInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInsertActionPerformed
        if(jcbString.getSelectedIndex()==0) jtaString.append("ABCDEFGHIJKLMNOPQRSTUWXYZ");
        else if(jcbString.getSelectedIndex()==1) jtaString.append("abcdefghijklmnopqrstuwxyz");
        else if(jcbString.getSelectedIndex()==2) jtaString.append("ABCDEFGHIJKLMNOPQRSTUWXYZabcdefghijklmnopqrstuwxyz");
        else if(jcbString.getSelectedIndex()==3) jtaString.append("0123456789");
        else if(jcbString.getSelectedIndex()==4) jtaString.append("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
        else if(jcbString.getSelectedIndex()==5) jtaString.append("ĄĆĘŁŃÓŚŻŹąćęłńóśżź");
    }//GEN-LAST:event_jbInsertActionPerformed

    private void jbGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGenerateActionPerformed
        jtaString.setText(sortChars(jtaString.getText().replaceAll("\\s+","")));
        index="";
        jtaWynik.setText("const char "+fc.getSelectedFont().getName()+Integer.toString(fc.getSelectedFont().getSize())+"ptBitmap[] = {\n");
        generateGlyphs(fc.getSelectedFontSize(),jtaString.getText(),fc.getSelectedFont());
        jtaWynik.append("};\n\n//Wysokość znaku\n");
        jtaWynik.append("const char "+fc.getSelectedFont().getName()+Integer.toString(fc.getSelectedFont().getSize())+"ptHeight = "+chheight+";\n");
        
        if(jrbSWys.isSelected()&&jrbZSzer.isSelected())
        {
            jtaWynik.append("//{[Szerokość],[Indeks pierwszego bajtu]}\n");
            jtaWynik.append("const unsigned int "+fc.getSelectedFont().getName()+Integer.toString(fc.getSelectedFont().getSize())+"ptIndex[][2] = {\n");
        }
        else if (jrbZWys.isSelected()&&jrbSSzer.isSelected())
        {
            jtaWynik.append("//{[Wysokość],[Indeks pierwszego bajtu]}\n");
            jtaWynik.append("const unsigned int "+fc.getSelectedFont().getName()+Integer.toString(fc.getSelectedFont().getSize())+"ptIndex[][2] = {\n");
        }
        else if (jrbZWys.isSelected()&&jrbZSzer.isSelected())
        {
            jtaWynik.append("//{[Szerokość],[Wysokość],[Indeks pierwszego bajtu]}\n");
            jtaWynik.append("const unsigned int "+fc.getSelectedFont().getName()+Integer.toString(fc.getSelectedFont().getSize())+"ptIndex[][3] = {\n");
        }
        else
        {
            jtaWynik.append("//{[Indeks pierwszego bajtu]}\n");
            jtaWynik.append("const unsigned int "+fc.getSelectedFont().getName()+Integer.toString(fc.getSelectedFont().getSize())+"ptIndex[] = {\n");
        }
        
             
        jtaWynik.append(index+"};");
    }//GEN-LAST:event_jbGenerateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgBajt;
    private javax.swing.ButtonGroup bgDane;
    private javax.swing.ButtonGroup bgSzer;
    private javax.swing.ButtonGroup bgTablica;
    private javax.swing.ButtonGroup bgWys;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbFont;
    private javax.swing.JButton jbGenerate;
    private javax.swing.JButton jbInsert;
    private javax.swing.JComboBox jcbString;
    private javax.swing.JRadioButton jrbCiag;
    private javax.swing.JRadioButton jrbLSB;
    private javax.swing.JRadioButton jrbLiniaBajt;
    private javax.swing.JRadioButton jrbMSB;
    private javax.swing.JRadioButton jrbSSzer;
    private javax.swing.JRadioButton jrbSWys;
    private javax.swing.JRadioButton jrbTabNiepel;
    private javax.swing.JRadioButton jrbTabPel;
    private javax.swing.JRadioButton jrbTabPolPel;
    private javax.swing.JRadioButton jrbZSzer;
    private javax.swing.JRadioButton jrbZWys;
    private javax.swing.JRadioButton jrbZnakBajt;
    private javax.swing.JTextArea jtaString;
    private javax.swing.JTextArea jtaWynik;
    // End of variables declaration//GEN-END:variables
}
